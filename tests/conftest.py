import pandas as pd
import pytest


@pytest.fixture
def mock_transactions_df():
    """
    Фикстура для DataFrame с тестовыми транзакциями, имитирующими operations.xls.
    В 'Сумма платежа' используем отрицательные значения для расходов.
    """
    data = {
        "Дата операции": [
            "01.07.2024 10:00:00",
            "02.07.2024 11:00:00",
            "03.07.2024 12:00:00",
            "04.07.2024 13:00:00",
            "05.07.2024 14:00:00",
            "05.07.2024 15:00:00",
            "05.07.2024 16:00:00",
            "05.07.2024 17:00:00",
            "05.07.2024 18:00:00",
            "06.07.2024 09:00:00",  # Новая транзакция для проверки граничных условий
        ],
        "Дата платежа": [
            "01.07.2024",
            "02.07.2024",
            "03.07.2024",
            "04.07.2024",
            "05.07.2024",
            "05.07.2024",
            "05.07.2024",
            "05.07.2024",
            "05.07.2024",
            "06.07.2024",
        ],
        "Номер карты": [
            "*1111",
            "*2222",
            "*1111",
            "*3333",
            "*1111",
            "*2222",
            "*1111",
            "*3333",
            "*1111",
            "*1111",
        ],
        "Статус": ["OK", "OK", "OK", "OK", "OK", "OK", "FAILED", "OK", "OK", "OK"],
        "Сумма операции": [
            -100.00,
            -200.00,
            -150.00,
            -50.00,
            -300.00,
            -1000.00,
            -500.00,
            -400.00,
            -700.00,
            5000.00,  # Положительная сумма, как зачисление
        ],
        "Валюта операции": ["RUB", "RUB", "RUB", "RUB", "RUB", "RUB", "RUB", "RUB", "RUB", "RUB"],
        "Сумма платежа": [
            -100.00,
            -200.00,
            -150.00,
            -50.00,
            -300.00,
            -1000.00,
            -500.00,  # Эта сумма должна быть проигнорирована т.к. FAILED статус
            -400.00,
            -700.00,
            5000.00,  # Зачисление, не расход
        ],
        "Валюта платежа": ["RUB", "RUB", "RUB", "RUB", "RUB", "RUB", "RUB", "RUB", "RUB", "RUB"],
        "Кэшбэк": [1.00, 2.00, 1.50, 0.50, 3.00, 10.00, 5.00, 4.00, 7.00, 0.00],
        "Категория": [
            "Еда",
            "Транспорт",
            "Развлечения",
            "Продукты",
            "Кафе",
            "Путешествия",
            "Здоровье",
            "Образование",
            "Магазины",
            "Зарплата",
        ],
        "MCC": ["5812", "4111", "7832", "5411", "5814", "4722", "8099", "8299", "5311", "1234"],
        "Описание": [
            "Обед в кафе",
            "Поездка на автобусе",
            "Билет в кино",
            "Покупка в магазине",
            "Кофе в Старбакс",
            "Авиабилеты",
            "Поход к врачу (FAILED)",
            "Курсы программирования",
            "Покупки одежды",
            "Зарплата",
        ],
        "Бонусы (включая кэшбэк)": ["1,00", "2,00", "1,50", "0,50", "3,00", "10,00", "5,00", "4,00", "7,00", "0,00"],
        "Округление на инвесткопилку": [
            "0,00",
            "0,00",
            "0,00",
            "0,00",
            "0,00",
            "0,00",
            "0,00",
            "0,00",
            "0,00",
            "0,00",
        ],
        "Сумма операции с округлением": [
            -100.00,
            -200.00,
            -150.00,
            -50.00,
            -300.00,
            -1000.00,
            -500.00,
            -400.00,
            -700.00,
            5000.00,
        ],
    }
    df = pd.DataFrame(data)
    return df
